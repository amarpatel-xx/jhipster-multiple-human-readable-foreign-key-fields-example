application {
  config {
    baseName gateway
    packageName com.saathratri.developer.gateway
    applicationType gateway
    authenticationType oauth2
    buildTool maven
    clientFramework angularX
    prodDatabaseType postgresql
    serviceDiscoveryType eureka
    testFrameworks [cypress]
    microfrontends [blog, store]
  }
}

application {
  config {
    baseName blog
    packageName com.saathratri.developer.blog
    applicationType microservice
    authenticationType oauth2
    buildTool maven
    clientFramework angularX
    databaseType neo4j
    devDatabaseType neo4j
    prodDatabaseType neo4j
    enableHibernateCache false
    serverPort 8081
    serviceDiscoveryType eureka
    testFrameworks [cypress]
  }
  entities Blog, Post, Tag
}

application {
  config {
    baseName store
    packageName com.saathratri.developer.store
    applicationType microservice
    authenticationType oauth2
    buildTool maven
    clientFramework angularX
    databaseType mongodb
    devDatabaseType mongodb
    prodDatabaseType mongodb
    enableHibernateCache false
    serverPort 8082
    serviceDiscoveryType eureka
    testFrameworks [cypress]
  }
  entities Product
}

entity Blog {
  id UUID required
  @customAnnotation("DISPLAY_IN_GUI_RELATIONSHIP_LINK") @customAnnotation("-") name String required minlength(3)
  @customAnnotation("DISPLAY_IN_GUI_RELATIONSHIP_LINK") @customAnnotation(" ") handle String required minlength(2)
}

entity Post {
  id UUID required
  title String required
  content TextBlob required
  date LocalDate required
}

entity Tag {
  id UUID required
  name String required minlength(2)
}

entity Product {
  id UUID required
  title String required
  price BigDecimal required min(0)
  image ImageBlob
  date LocalDate required
}

relationship ManyToOne {
  Blog{user(login)} to User with builtInEntity
  Post{blog} to Blog
}

relationship ManyToMany {
  Post{tag(name)} to Tag{post}
}

paginate Post, Tag, Product with pagination

deployment {
  deploymentType docker-compose
  serviceDiscoveryType eureka
  appsFolders [gateway, blog, store]
  dockerRepositoryName "amarppatel"
}

deployment {
  deploymentType kubernetes
  appsFolders [gateway, blog, store]
  clusteredDbApps [store]
  kubernetesNamespace demo
  kubernetesUseDynamicStorage true
  kubernetesStorageClassName ""
  serviceDiscoveryType eureka
  dockerRepositoryName "amarppatel"
}

// Use DTO
dto all with mapstruct

// Set service options to all
service all with serviceImpl